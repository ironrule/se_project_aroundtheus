!function(){"use strict";class e{constructor(e,t,s,r,i){this.card=e,this.name=e.name,this.link=e.link,this.cardID=e._id,this.isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this.handleLikeClick=i}renderCard(){return this.cardElement=this._getTemplate(),this.cardElement.querySelector(".card__title").textContent=this.name,this.cardImageElement=this.cardElement.querySelector(".card__image"),this.likeButton=this.cardElement.querySelector(".card__like-button"),this.isLiked&&this.likeButton.classList.add("card__like-button_active"),this.deleteButton=this.cardElement.querySelector(".card__delete-button"),this.cardImageElement.src=this.link,this.cardImageElement.alt=this.name,this._setEventListeners(),this.cardElement}_getTemplate(){return document.querySelector(this._cardSelector).content.firstElementChild.cloneNode(!0)}_setEventListeners(){this.cardImageElement.addEventListener("click",(()=>{this._handleImageClick(this)})),this.likeButton.addEventListener("click",this._handleLikeButton),this.deleteButton.addEventListener("click",(()=>{this._handleDeleteClick(this)}))}_handleLikeButton=()=>{this.likeButton.classList.contains("card__like-button_active")?this.likeButton.classList.contains("card__like-button_active")&&(this.likeButton.classList.remove("card__like-button_active"),this.handleLikeClick(this.card,"removeLike")):(this.likeButton.classList.add("card__like-button_active"),this.handleLikeClick(this.card,"addLike"))}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formEl=t}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputEls.forEach((e=>{this._hideInputError(e)}))}_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_showInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent=null,t.classList.remove(this._errorClass)}_toggleButtonState(){if(this._hasInvalidInput())return this._submitButton.classList.add(this._inactiveButtonClass),void(this._submitButton.disabled=!0);this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_setEventListeners(){this._inputEls=[...this._formEl.querySelectorAll(this._inputSelector)],this._submitButton=this._formEl.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}}const s=document.querySelector(".profile__edit-button"),r=document.querySelector(".profile__overlay-button"),i="#card-template",n=document.querySelector(".card__container"),o=document.querySelector(".profile__add-button");class a{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close"))&&this.close()}))}}class l extends a{constructor(e,t){super(e),this._formInputs=this._popupElement.querySelectorAll(".modal__input"),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._handleSubmit=this._handleSubmit.bind(this),this._popupButton=this._popupElement.querySelector(".modal__button")}_handleSubmit(e){this._popupButton.textContent="Saving...",e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t),this.close(),this._popupForm.reset()}_getInputValues(){return this._inputData={},this._formInputs.forEach((e=>{this._inputData[e.name]=e.value})),this._inputData}setInputValues(e){this._formInputs.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",this._handleSubmit)}}class d{constructor(e,t){let{items:s,renderer:r}=e;this._cardContainer=t,this._items=s,this._renderer=r}renderItems(){this._items.forEach((e=>{this._renderer(e,"append")}))}addItem(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"append";this._cardContainer[t](e)}}const c=new class{constructor(e){this._profileName=document.querySelector(e.name),this._profileDescription=document.querySelector(e.description),this._profileAvatar=document.querySelector(e.avatar)}getUserInfo(){return{title:this._profileName.textContent,description:this._profileDescription.textContent}}setUserInfo(e){let{name:t,description:s}=e;this._profileName.textContent=t,this._profileDescription.textContent=s}setUserAvatar(e){this._profileAvatar.src=e}}({name:".profile__name",description:".profile__description",avatar:".profile__image"}),h=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}initialSite(e){let[t,s]=e;Promise.all([t,s])}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}setUserInfo(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}setAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}deleteLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"7d61f2da-4ddf-40b8-adec-eade6c2db478","Content-Type":"application/json"}}),u=new l("#modal__profile",(function(e){h.setUserInfo(e.title,e.description).then((()=>{c.setUserInfo({name:e.title,description:e.description})})).catch((e=>{console.error(e)}))})),_=new l("#modal__avatar",(function(e){h.setAvatar(e.url).then((e=>{c.setUserAvatar(e.avatar)})).catch((e=>{console.error(e)}))})),m=new d({},n),p=new l("#modal__add-card",(function(e){const t={name:e.title,link:e.url};h.addCard(t).then((e=>{L(e,"prepend")})).catch((e=>{console.error(e)}))})),E=new class extends a{constructor(e){super(e),this.imagePreview=this._popupElement.querySelector(".modal__preview-image"),this.imageCaption=this._popupElement.querySelector(".modal__preview-caption")}open(e){this.imagePreview.src=e.link,this.imagePreview.alt=e.name,this.imageCaption.textContent=e.name,super.open()}}("#modal__preview-wrapper"),v=new class extends a{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t}open(e){this.cardID=e,super.open()}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(()=>{this._handleFormSubmit(this.cardID),super.close()}))}}("#modal__delete-card",(function(e){h.deleteCard(e.cardID).then((()=>{e.cardElement.remove(),e.cardElement=null})).catch((e=>{console.error(e)}))})),f=(new e({},i,S,C,I),h.getUserInfo().then((e=>{var t;t=e,c.setUserInfo({name:t.name,description:t.about}),c.setUserAvatar(t.avatar)})).catch((e=>{console.error(e)}))),k=h.getInitialCards().then((e=>{new d({items:e,renderer:L},n).renderItems()})).catch((e=>{console.error(e)}));h.initialSite([f,k]);const b={};function L(t){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"append";const r=new e(t,i,S,C,I).renderCard();m.addItem(r,s)}function S(e){E.open(e)}function C(e){v.open(e)}function I(e,t){"addLike"===t&&h.addLike(e._id).catch((e=>{console.error(e)})),"removeLike"===t&&h.deleteLike(e._id).catch((e=>{console.error(e)}))}var y;y={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible",formSelector:".modal__form"},Array.from(document.querySelectorAll(y.formSelector)).forEach((e=>{const s=new t(y,e),r=e.getAttribute("name");b[r]=s,s.enableValidation()})),s.addEventListener("click",(function(){const e=c.getUserInfo();u.setInputValues(e),b["profile-form"].resetValidation(),u.open()})),o.addEventListener("click",(()=>{b["card-form"].resetValidation(),p.open()})),r.addEventListener("click",(()=>{b["avatar-form"].resetValidation(),_.open()})),E.setEventListeners(),u.setEventListeners(),_.setEventListeners(),p.setEventListeners(),v.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,